/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.skype.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.rivetlogic.skype.model.SkypeGroup;
import com.rivetlogic.skype.model.SkypeGroupModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SkypeGroup service. Represents a row in the &quot;rivetlogic_skype_SkypeGroup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SkypeGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SkypeGroupImpl}.
 * </p>
 *
 * @author Rivet Logic
 * @see SkypeGroupImpl
 * @see SkypeGroup
 * @see SkypeGroupModel
 * @generated
 */
@ProviderType
public class SkypeGroupModelImpl extends BaseModelImpl<SkypeGroup>
	implements SkypeGroupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a skype group model instance should use the {@link SkypeGroup} interface instead.
	 */
	public static final String TABLE_NAME = "rivetlogic_skype_SkypeGroup";
	public static final Object[][] TABLE_COLUMNS = {
			{ "skypeGroupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "groupName", Types.VARCHAR },
			{ "skypeContacts", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("skypeGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skypeContacts", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table rivetlogic_skype_SkypeGroup (skypeGroupId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,groupName VARCHAR(75) null,skypeContacts TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table rivetlogic_skype_SkypeGroup";
	public static final String ORDER_BY_JPQL = " ORDER BY skypeGroup.modifiedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rivetlogic_skype_SkypeGroup.modifiedDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.rivetlogic.skype.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.rivetlogic.skype.model.SkypeGroup"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.rivetlogic.skype.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.rivetlogic.skype.model.SkypeGroup"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.rivetlogic.skype.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.rivetlogic.skype.model.SkypeGroup"),
			true);
	public static final long GROUPNAME_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.rivetlogic.skype.service.util.PropsUtil.get(
				"lock.expiration.time.com.rivetlogic.skype.model.SkypeGroup"));

	public SkypeGroupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _skypeGroupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSkypeGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _skypeGroupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SkypeGroup.class;
	}

	@Override
	public String getModelClassName() {
		return SkypeGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("skypeGroupId", getSkypeGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("groupName", getGroupName());
		attributes.put("skypeContacts", getSkypeContacts());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long skypeGroupId = (Long)attributes.get("skypeGroupId");

		if (skypeGroupId != null) {
			setSkypeGroupId(skypeGroupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String groupName = (String)attributes.get("groupName");

		if (groupName != null) {
			setGroupName(groupName);
		}

		String skypeContacts = (String)attributes.get("skypeContacts");

		if (skypeContacts != null) {
			setSkypeContacts(skypeContacts);
		}
	}

	@Override
	public long getSkypeGroupId() {
		return _skypeGroupId;
	}

	@Override
	public void setSkypeGroupId(long skypeGroupId) {
		_skypeGroupId = skypeGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getGroupName() {
		if (_groupName == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupName;
		}
	}

	@Override
	public void setGroupName(String groupName) {
		_columnBitmask |= GROUPNAME_COLUMN_BITMASK;

		if (_originalGroupName == null) {
			_originalGroupName = _groupName;
		}

		_groupName = groupName;
	}

	public String getOriginalGroupName() {
		return GetterUtil.getString(_originalGroupName);
	}

	@JSON
	@Override
	public String getSkypeContacts() {
		if (_skypeContacts == null) {
			return StringPool.BLANK;
		}
		else {
			return _skypeContacts;
		}
	}

	@Override
	public void setSkypeContacts(String skypeContacts) {
		_skypeContacts = skypeContacts;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SkypeGroup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SkypeGroup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SkypeGroup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SkypeGroupImpl skypeGroupImpl = new SkypeGroupImpl();

		skypeGroupImpl.setSkypeGroupId(getSkypeGroupId());
		skypeGroupImpl.setUserId(getUserId());
		skypeGroupImpl.setUserName(getUserName());
		skypeGroupImpl.setCreateDate(getCreateDate());
		skypeGroupImpl.setModifiedDate(getModifiedDate());
		skypeGroupImpl.setGroupName(getGroupName());
		skypeGroupImpl.setSkypeContacts(getSkypeContacts());

		skypeGroupImpl.resetOriginalValues();

		return skypeGroupImpl;
	}

	@Override
	public int compareTo(SkypeGroup skypeGroup) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				skypeGroup.getModifiedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SkypeGroup)) {
			return false;
		}

		SkypeGroup skypeGroup = (SkypeGroup)obj;

		long primaryKey = skypeGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SkypeGroupModelImpl skypeGroupModelImpl = this;

		skypeGroupModelImpl._originalUserId = skypeGroupModelImpl._userId;

		skypeGroupModelImpl._setOriginalUserId = false;

		skypeGroupModelImpl._setModifiedDate = false;

		skypeGroupModelImpl._originalGroupName = skypeGroupModelImpl._groupName;

		skypeGroupModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SkypeGroup> toCacheModel() {
		SkypeGroupCacheModel skypeGroupCacheModel = new SkypeGroupCacheModel();

		skypeGroupCacheModel.skypeGroupId = getSkypeGroupId();

		skypeGroupCacheModel.userId = getUserId();

		skypeGroupCacheModel.userName = getUserName();

		String userName = skypeGroupCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			skypeGroupCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			skypeGroupCacheModel.createDate = createDate.getTime();
		}
		else {
			skypeGroupCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			skypeGroupCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			skypeGroupCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		skypeGroupCacheModel.groupName = getGroupName();

		String groupName = skypeGroupCacheModel.groupName;

		if ((groupName != null) && (groupName.length() == 0)) {
			skypeGroupCacheModel.groupName = null;
		}

		skypeGroupCacheModel.skypeContacts = getSkypeContacts();

		String skypeContacts = skypeGroupCacheModel.skypeContacts;

		if ((skypeContacts != null) && (skypeContacts.length() == 0)) {
			skypeGroupCacheModel.skypeContacts = null;
		}

		return skypeGroupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{skypeGroupId=");
		sb.append(getSkypeGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", groupName=");
		sb.append(getGroupName());
		sb.append(", skypeContacts=");
		sb.append(getSkypeContacts());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.rivetlogic.skype.model.SkypeGroup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>skypeGroupId</column-name><column-value><![CDATA[");
		sb.append(getSkypeGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupName</column-name><column-value><![CDATA[");
		sb.append(getGroupName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>skypeContacts</column-name><column-value><![CDATA[");
		sb.append(getSkypeContacts());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SkypeGroup.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SkypeGroup.class
		};
	private long _skypeGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _groupName;
	private String _originalGroupName;
	private String _skypeContacts;
	private long _columnBitmask;
	private SkypeGroup _escapedModel;
}